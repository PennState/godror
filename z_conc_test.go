// Copyright 2020 Tamás Gulácsi
//
//
// SPDX-License-Identifier: UPL-1.0 OR Apache-2.0

package godror_test

import (
	"context"
	"crypto/rand"
	"database/sql"
	"testing"
	"time"

	"github.com/oklog/ulid/v2"
	"golang.org/x/sync/errgroup"
)

func TestConcurrency(t *testing.T) {
	ctx, cancel := context.WithTimeout(testContext("Concurrenty"), 60*time.Second)
	defer cancel()
	const delQry = "DROP TABLE test_concurrency"
	testDb.ExecContext(ctx, delQry)
	qry := `CREATE TABLE test_concurrency (
      id         NUMBER(19) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
      user_id    VARCHAR2(50) NOT NULL, 
      bId        VARCHAR2(50) UNIQUE NOT NULL, 
      actionType NUMBER(3) NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP   
    )`
	if _, err := testDb.ExecContext(ctx, qry); err != nil {
		t.Fatalf("%s: %+v", qry, err)
	}
	defer testDb.ExecContext(context.Background(), delQry)

	started := make(chan struct{})
	grp, grpCtx := errgroup.WithContext(ctx)
	PrintConnStats()
	start := time.Now()
	for i := 0; i < maxSessions*512; i++ {
		i := i
		grp.Go(func() error {
			<-started
			return concHandleOne(grpCtx, testDb, i)
		})
	}
	close(started)
	PrintConnStats()
	go func() {
		time.Sleep(10 * time.Second)
		PrintConnStats()
	}()
	if err := grp.Wait(); err != nil {
		t.Fatal(err)
	}
	PrintConnStats()
	dur := time.Since(start)
	qry = "SELECT COUNT(0), MAX(created_at)-MIN(created_at) FROM test_concurrency"
	var n int
	var durS string
	if err := testDb.QueryRowContext(ctx, qry).Scan(&n, &durS); err != nil {
		t.Fatal(err)
	}
	t.Logf("Inserted %d rows in %s (%s)", n, durS, dur)
}
func concHandleOne(ctx context.Context, db *sql.DB, seq int) error {
	const qry = `INSERT INTO test_concurrency (bId, user_id, actionType) 
	  VALUES (:1, :2, :3)`
	ts := ulid.Timestamp(time.Now().UTC())
	bid := ulid.MustNew(ts, rand.Reader)
	uid := bid
	uid[15]++
	_, err := db.ExecContext(ctx, qry, bid, uid, 1)
	return err
}
